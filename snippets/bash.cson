'.source.shell':

  'comment -> bash':
    'prefix': 's-comment',
    'body': """
    # This is bash comment
    """
  's-bash  -> bash':
    'prefix': 's-bash',
    'body': """
    #!/usr/bin/env bash
    """
  's-echo  -> bash':
    'prefix': 's-echo',
    'body': """
    echo $1
    """
  's-printf  -> bash':
    'prefix': 's-printf',
    'body': """
    printf $1
    """
  's-read  -> bash':
    'prefix': 's-read',
    'body': """
    read -p "your q `echo $'\\n>> '`" q$1
    """
  'var set -> bash':
    'prefix': 's-var',
    'body': """
    var_name=$1
    """
  'var local set -> bash':
    'prefix': 's-varlocal',
    'body': """
    local var_name=$1
    """
  'var global set -> bash':
    'prefix': 's-varglobal',
    'body': """
    export var_name=$1
    """
  'var get -> bash':
    'prefix': 's-varget',
    'body': """
    $var_name
    """
  'var delete -> bash':
    'prefix': 's-vardelete',
    'body': """
    del var_name
    """

  'arithmatic -> bash':
    'prefix': 's-math',
    'body': """
    $(( $1 ))
    """

  'array set -> bash':
    'prefix': 's-arrayset',
    'body': """
    array_list=(a1 a2)
    """

  'array get -> bash':
    'prefix': 's-arrayget',
    'body': """
    ${array_list[$1]}
    """
  'array size -> bash':
    'prefix': 's-arrsize',
    'body': """
    ${#array_list$1}
    """
  'array slice -> bash':
    'prefix': 's-arrayslice',
    'body': """
    ${array_list[$1]:0:3}
    """
  'array delete -> bash':
    'prefix': 's-arraydelete',
    'body': """
    unset array_list[$1]
    """

  'condition part [] -> bash':
    'prefix': 's-condition-part',
    'body': """
    [ $1 ]
    """
  'equal -> bash':
    'prefix': 'sc-eq',
    'body': """
    -eq $1
    """
  'not equal -> bash':
    'prefix': 'sc-ne',
    'body': """
    -ne $1
    """
  'less than -> bash':
    'prefix': 'sc-lt',
    'body': """
    -lt $1
    """
  'less than equal -> bash':
    'prefix': 'sc-le',
    'body': """
    -le $1
    """
  'greater than -> bash':
    'prefix': 'sc-gt',
    'body': """
    -gt $1
    """
  'greater than equal -> bash':
    'prefix': 'sc-ge',
    'body': """
    -ge $1
    """
  'if -> bash':
    'prefix': 's-if',
    'body': """
    if [ $1 ]; then
      # code
    fi
    """
  'if -> else -> bash':
    'prefix': 's-if2',
    'body': """
    if [ $1 ]; then
      # code
    else
      # code
    fi
    """
  'else if -> bash':
    'prefix': 's-if3',
    'body': """
    if [ $1 ]; then
      # code
    elif [ $1 ]; then
      # code
    else
      # code
    fi
    """

  'else if el-> bash':
    'prefix': 's-elseif',
    'body': """
    elif [ $1 ]; then
      # code
    """

  'switch -> bash':
    'prefix': 's-switch',
    'body': """
    case condition$1 in
      check)
        #code
      ;;
      *)
        #code
      ;;
    esac
    """
  'case -> bash':
    'prefix': 's-case',
    'body': """
    check)
      #code
    ;;
    """
  'for in -> bash':
    'prefix': 's-forin',
    'body': """
    for i in $1; do
      #code
    done
    """
  'for -> bash':
    'prefix': 's-for',
    'body': """
    for (( i=0 ; i < $n ; i++ )); do
      #code
    done
    """
  'while -> bash':
    'prefix': 's-while',
    'body': """
    while [ condition ]; do
      #statements
    done
    """
  'until -> bash':
    'prefix': 's-until',
    'body': """
    until [ condition ]; do
      #statements
    done
    """


  'pipe -> bash':
    'prefix': 's-pipe',
    'body': """
    | $1
    """
  'and -> bash':
    'prefix': 's-and',
    'body': """
    && $1
    """
  'or -> bash':
    'prefix': 's-or',
    'body': """
    || $1
    """
  'not -> bash':
    'prefix': 's-not',
    'body': """
    ! $1
    """
  'continue -> bash':
    'prefix': 's-continue',
    'body': """
    continue
    """
  'break -> bash':
    'prefix': 's-break',
    'body': """
    break
    """

  'function -> bash':
    'prefix': 's-function',
    'body': """
    user() {
      #code
    }
    """

  'sleep -> bash':
    'prefix': 's-sleep',
    'body': """
    sleep $1
    """

  '-e exist file -> bash file':
    'prefix': 'sf-e',
    'body': """
    -e $1
    """
  '-d exist directory -> bash file':
    'prefix': 'sf-d',
    'body': """
    -d $1
    """
  '-f exist file & regular -> bash file':
    'prefix': 'sf-f',
    'body': """
    -f $1
    """
  '-r read -> bash file':
    'prefix': 'sf-r',
    'body': """
    -r $1
    """
  '-w write -> bash file':
    'prefix': 'sf-w',
    'body': """
    -w $1
    """
  '-x execute -> bash file':
    'prefix': 'sf-x',
    'body': """
    -x $1
    """

  'export -> bash':
    'prefix': 's-export',
    'body': """
    export PATH=file$1:$PATH
    """

  'alias -> bash':
    'prefix': 's-alias',
    'body': """
    alias me='$1'
    """
  'eval -> bash':
    'prefix': 's-eval',
    'body': """
    eval $1
    """
  'exit 0 -> bash':
    'prefix': 's-exit0',
    'body': """
    exit 0
    """
  'exit 1 -> bash':
    'prefix': 's-exit1',
    'body': """
    exit 1
    """
